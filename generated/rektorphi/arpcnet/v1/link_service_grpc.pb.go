// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkServiceClient is the client API for LinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkServiceClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (LinkService_LinkClient, error)
}

type linkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkServiceClient(cc grpc.ClientConnInterface) LinkServiceClient {
	return &linkServiceClient{cc}
}

func (c *linkServiceClient) Link(ctx context.Context, opts ...grpc.CallOption) (LinkService_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &LinkService_ServiceDesc.Streams[0], "/rektorphi.arpcnet.v1.LinkService/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &linkServiceLinkClient{stream}
	return x, nil
}

type LinkService_LinkClient interface {
	Send(*LinkFrame) error
	Recv() (*LinkFrame, error)
	grpc.ClientStream
}

type linkServiceLinkClient struct {
	grpc.ClientStream
}

func (x *linkServiceLinkClient) Send(m *LinkFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *linkServiceLinkClient) Recv() (*LinkFrame, error) {
	m := new(LinkFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LinkServiceServer is the server API for LinkService service.
// All implementations must embed UnimplementedLinkServiceServer
// for forward compatibility
type LinkServiceServer interface {
	Link(LinkService_LinkServer) error
	mustEmbedUnimplementedLinkServiceServer()
}

// UnimplementedLinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkServiceServer struct {
}

func (UnimplementedLinkServiceServer) Link(LinkService_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedLinkServiceServer) mustEmbedUnimplementedLinkServiceServer() {}

// UnsafeLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkServiceServer will
// result in compilation errors.
type UnsafeLinkServiceServer interface {
	mustEmbedUnimplementedLinkServiceServer()
}

func RegisterLinkServiceServer(s grpc.ServiceRegistrar, srv LinkServiceServer) {
	s.RegisterService(&LinkService_ServiceDesc, srv)
}

func _LinkService_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LinkServiceServer).Link(&linkServiceLinkServer{stream})
}

type LinkService_LinkServer interface {
	Send(*LinkFrame) error
	Recv() (*LinkFrame, error)
	grpc.ServerStream
}

type linkServiceLinkServer struct {
	grpc.ServerStream
}

func (x *linkServiceLinkServer) Send(m *LinkFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *linkServiceLinkServer) Recv() (*LinkFrame, error) {
	m := new(LinkFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LinkService_ServiceDesc is the grpc.ServiceDesc for LinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rektorphi.arpcnet.v1.LinkService",
	HandlerType: (*LinkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _LinkService_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rektorphi/arpcnet/v1/link_service.proto",
}
